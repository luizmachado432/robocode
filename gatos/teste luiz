package kkk;

import robocode.HitRobotEvent;
import robocode.Robot;
import robocode.ScannedRobotEvent;
import robocode.util.Utils;
import java.awt.Color;

public class Teste extends Robot {
    // Variáveis para rastreamento
    private String trackName = null; // Nome do robô rastreado
    private double closestDistance = Double.MAX_VALUE; // Distância do robô mais próximo

    // Método principal do robô, chamado quando a batalha começa
    public void run() {
        // Define as cores do robô
        setColors(Color.pink, Color.pink, Color.pink, Color.pink, Color.pink);
        setGunColor(Color.pink);
        setRadarColor(Color.pink);
        setScanColor(Color.pink);
        setBulletColor(Color.pink);

        // Define moveAmount como o maior valor entre a largura e a altura do campo de batalha
        double moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight());

        // Ajusta o robô para ficar alinhado com a parede
        turnLeft(getHeading() % 90);
        // Move o robô até a parede
        ahead(moveAmount);

        // Gira o canhão 90 graus para a direita
        turnGunRight(90);
        // Gira o robô 90 graus para a direita
        turnRight(90);

        // Girar o radar continuamente enquanto procura um robô
        turnRadarRight(360);

        // Loop infinito para manter o robô se movendo
        while (true) {
            // Move o robô para a frente pela distância moveAmount
            ahead(moveAmount);
            // Gira o robô 90 graus para a direita
            turnRight(90);
        }
    }

    // Método chamado quando o robô colide com outro robô
    public void onHitRobot(HitRobotEvent e) {
        // Ajusta a rotação do canhão para apontar para o robô inimigo
        double gunTurnAmt = Utils.normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getGunHeading()));
        turnGunRight(gunTurnAmt);

        // Dispara com toda a força
        fire(3);

        // Verifica se o robô inimigo está na frente
        if (e.getBearing() > -90 && e.getBearing() < 90) {
            // Se o robô inimigo estiver na frente, recua 100 unidades
            back(100);
        } else {
            // Se o robô inimigo estiver atrás, avança 100 unidades
            ahead(100);
        }

        // Reinicia a busca por novos alvos
        trackName = null;
        closestDistance = Double.MAX_VALUE; // Reinicia a distância mais próxima
        turnRadarRight(360); // Volta a girar o radar para procurar novos alvos
    }

    // Método chamado quando o robô escaneia outro robô
    public void onScannedRobot(ScannedRobotEvent e) {
        // Calcula a distância do robô escaneado
        double distance = e.getDistance();

        // Se a distância do robô escaneado for menor que a distância mais próxima
        if (distance < closestDistance) {
            closestDistance = distance; // Atualiza a distância mais próxima
            trackName = e.getName(); // Atualiza o nome do robô rastreado
        }

        // Se estamos rastreando um alvo e o alvo atual não é o mesmo, apenas retorna
        if (trackName != null && !e.getName().equals(trackName)) {
            return;
        }

        // Ajusta a rotação do radar para continuar rastreando o alvo
        double radarTurn = getHeading() - getRadarHeading() + e.getBearing();
        turnRadarRight(Utils.normalRelativeAngleDegrees(radarTurn));

        // Ajusta a rotação do canhão para apontar para o alvo
        double gunTurnAmt = Utils.normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getGunHeading()));
        turnGunRight(gunTurnAmt);

        // Dispara em direção ao alvo
        fire(3);
    }
}
