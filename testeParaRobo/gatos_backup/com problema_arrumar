package gatos;

import robocode.HitRobotEvent;
import robocode.Robot;
import robocode.ScannedRobotEvent;
import robocode.util.Utils;
import robocode.Rules;
import java.awt.Color;

// Definição da classe GatoFeliz que estende a classe Robot do Robocode
public class GatoFeliz extends Robot {
    // Variável para armazenar a distância a ser movida
    double moveAmount;

    // Método principal do robô, chamado quando a batalha começa
    public void run() {
        // Set colors
        setColors(Color.pink, Color.pink, Color.pink, Color.pink, Color.pink);
        setGunColor(Color.pink);
        setRadarColor(Color.pink);
        setScanColor(Color.pink);
        setBulletColor(Color.pink);

        // Define moveAmount como o maior valor entre a largura e a altura do campo de batalha
        moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight());

        // Ajusta o robô para ficar alinhado com a parede
        turnLeft(getHeading() % 90);
        // Move o robô até a parede
        ahead(moveAmount);

        // Gira o canhão 90 graus para a direita
        turnGunRight(90);
        // Gira o robô 90 graus para a direita
        turnRight(90);

        // Loop infinito para manter o robô se movendo
        while (true) {
            // Move o robô para a frente pela distância moveAmount
            ahead(moveAmount);
            // Gira o robô 90 graus para a direita
            turnRight(90);
        }
    }

    // Método chamado quando o robô colide com outro robô
    public void onHitRobot(HitRobotEvent e) {
        // Verifica se o robô inimigo está na frente
        if (e.getBearing() > -90 && e.getBearing() < 90) {
            // Se o robô inimigo estiver na frente, recua 100 unidades
            back(100);
        } else {
            // Se o robô inimigo estiver atrás, avança 100 unidades
            ahead(100);
        }
    }

    // Método chamado quando o robô escaneia outro robô
    public void onScannedRobot(ScannedRobotEvent e) {
        double absoluteBearing = getHeadingRadians() + e.getBearingRadians();
        double gunTurn = absoluteBearing - getGunHeadingRadians();
        double future = e.getVelocity() * Math.sin(e.getHeadingRadians() - absoluteBearing) / Rules.getBulletSpeed(1);
        
        setTurnGunRightRadians(Utils.normalRelativeAngle(gunTurn + future));
        setFire(1);
    }
}
